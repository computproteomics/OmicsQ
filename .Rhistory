ls()
library(MASS)
# Generate a set of data from a normal distribution
data <- rnorm(100)
# Fit a normal distribution to the data
fit <- fitdistr(data, "normal")
# Plot the histogram of the data with the fitted distribution
hist(data, freq = FALSE, main = "Normal distribution fit")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "blue")
fit
ks.test(data, "pnorm")
data <- lrnorm(100)
data <- rlnorm(100)
ks.test(data, "pnorm")
# Generate a set of count data from a Poisson distribution
data <- rpois(100, lambda = 3)
# Kolmogorov-Smirnov test
ks.test(data, "ppois")
# Kolmogorov-Smirnov test
ks.test(data, "ppois", lambda = 3)
# Generate a set of count data from a Poisson distribution
data <- rpois(100, lambda = 3)
# Fit a Poisson distribution to the data
fit <- fitdistr(data, "poisson")
# Kolmogorov-Smirnov test
ks.test(data, "ppois", lambda = fit$estimate[1])
fit$estimate
# Kolmogorov-Smirnov test
ks.test(data, "ppois", lambda = 3)
# Generate a set of count data from a Poisson distribution
data <- rpois(1000, lambda = 3)
# Fit a Poisson distribution to the data
fit <- fitdistr(data, "poisson")
# Kolmogorov-Smirnov test
ks.test(data, "ppois", lambda = fit$estimate[1])
# Kolmogorov-Smirnov test
ks.test(data, "ppois", lambda = fit$estimate[1], simulate.p.value = T)
# Generate a set of count data from a Poisson distribution
data <- rexp(1000, rate = 10)
# Fit a Poisson distribution to the data
fit <- fitdistr(data, "exp")
?fitdistr
# Fit a Poisson distribution to the data
fit <- fitdistr(data, "exponential")
# Kolmogorov-Smirnov test
ks.test(data, "pexp", lambda = fit$estimate[1])
fit
# Kolmogorov-Smirnov test
ks.test(data, "pexp", rate = fit$estimate[1])
# Generate a set of count data from a exponential distribution
data <- rexp(100, rate = 10)
# Fit a exponential distribution to the data
fit <- fitdistr(data, "exponential")
# Kolmogorov-Smirnov test
ks.test(data, "pexp", rate = fit$estimate[1])
# Plot the histogram of the data with the fitted distribution
hist(data, freq = FALSE, main = "Exponential distribution fit")
curve(dexp(x, rate = fit$estimate[1]), add = TRUE, col = "blue")
qqplot(data, dexp(x, rate = 10))
qqplot(data, dexp(x, rate = 10))
data
qqplot(data, dexp(x, rate = 10))
qqplot(data, dexp(1:100, rate = 10))
?cats
?cat
data()
data("airquality"
)
data("airquality")
airquality
lm.out <- lm(Ozone ~ Solar.R, data = airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R + Wind, data = airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R + Wind + Day, data = airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R + Wind + Month, data = airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R*Temp + Wind, data = airquality)
summary(lm.out)
residuals(lm.out)
qqnorm(residuals(lm.out))
plot(lm.out)
plot(lm.out)
data("LakeHuron")
LakeHuron
l_h <- data.frame(LakeHuron)
l_h
l_h <- data.frame(x=1875:1972,y=as.vector(LakeHuron))
l_h
plot(l_h$x, l_h$y, type="p")
lm.out <- lm(y ~ x, data = l_h)
summary(lm.out)
qqnorm(residuals(lm.out))
plot(lm.out)
lm.out <- lm(y ~ poly(x, 2), data = l_h)
summary(lm.out)
plot(lm.out)
plot(l_h$x, l_h$y, type="p")
lines(l_h$x, predict(lm.out), col="red")
dev.off()
plot(gene.values)
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641,
0.429889283129897, 1.21134263252275)
plot(gene.values)
mean1 <- mean(gene.values[1:4])
mean1 <- mean(gene.values[1:4])
mean2 <- mean(gene.values[5:8])
sd1 <- sd(gene.values[1:4])
sd2 <- sd(gene.values[5:8])
t <- (mean1 - mean2) / sqrt(sd1^2/4 + sd2^2/4)
t
x <- seq(-4, 4, 0.01)
x
plot(x, dt(x, 6))
pt(t, 6)
pt(t, 6) * 2
t.test(gene.values[1:4], gene.values[5:8], var.equal = TRUE)
## Two-way Anova, interactions
data(ToothGrowth)
?ToothGrowth
sapply(ToothGrowth, class)
ToothGrowth
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sapply(ToothGrowth, class)
interaction.plot(ToothGrowth$supp,ToothGrowth$dose,ToothGrowth$len)
interaction.plot(ToothGrowth$dose,ToothGrowth$supp,ToothGrowth$len)
plot(len ~ supp + dose, data=ToothGrowth)
# with interaction
lm.out <- lm(len ~ supp*dose, ToothGrowth)
summary(lm.out)
qqnorm(lm.out$residuals)
plot(lm.out$fitted.values, lm.out$residuals)
#without interaction
lm.out2 <- lm(len ~ supp + dose, ToothGrowth)
summary(lm.out2)
anova(lm.out2,lm.out)
setwd("~/devel/Bioinformatics/DataAnalysis/ShinyApps/OmicsQ")
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/inst/shiny')
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/inst/shiny')
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/inst/shiny')
devtools::check()
setwd("~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/inst/shiny")
setwd("~/devel/Bioinformatics/DataAnalysis/ShinyApps/OmicsQ")
shiny::runApp()
shiny::runApp()
runApp()
